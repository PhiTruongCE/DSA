template <class T>
T SLinkedList<T>::removeAt(int index)
{
    if (index < 0 || index >= count) {
       throw std :: out_of_range (" Index is out of range ");
       //return -1;
       }
        if (index == 0) {
            Node *tmp = head;
            head = head->next;
            int temp = tmp->data;
            delete tmp;
            this->count--;
            return temp;
        }
        else if (index == count-1) {
            Node *pre = head;
            for (int i=0; i<index-1; i++) {
                pre = pre->next;
            }
            Node *tmp = tail;
            int temp = tmp->data;
            tail = pre;
            delete tmp;
            this->count--;
            return temp;
        }
        else {
            Node *pre = head;
            for (int i=0; i<index-1; i++) {
                pre = pre->next;
            }
            Node *tmp = pre->next;
            pre->next = tmp->next;
            int temp = tmp->data;
            delete tmp;
            this->count--;
            return temp;
        }
}

template <class T>
bool SLinkedList<T>::removeItem(const T& item)
{
    /* Remove the first apperance of item in list and return true, otherwise return false */
    int i;
        Node *tmp = head;
        for(i = 0;i<this->count ; i++){
            if(tmp->data == item){
                removeAt(i);
                return true;
            }
            else tmp = tmp->next;
        }
        return false;
}

template<class T>
void SLinkedList<T>::clear(){
    /* Remove all elements in list */
    Node *temp = new Node();
	    while (this->head != NULL)
	    {
		    temp = this->head;
		    this->head = this->head->next;
		    delete temp;
	    }
	    this->count = 0;
}